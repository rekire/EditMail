apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
//apply plugin: 'maven'
apply plugin: 'signing'


version = "2.0.0"
group = "eu.rekisoft.android"

def mavenVersion = "2.0.0"
def mavenArtifactId = "editmail"
def mavenGroupId = "eu.rekisoft.android"
def mavenDescription = "A smart control for entering email addresses with automatically checking if the domain exists and if the domain can receive emails"
def githubNickname= "rekire"
def githubProject = "EditMail"
def author="RenÃ© Kilczan"
def licenseName="Rekisoft Public License (RKSPL)"
def licenseUrl="http://www.rekisoft.eu/licenses/rkspl.html"
def licenseComment="This code is licensed under the Rekisoft Public License."
def theInceptionYear=2013

android {
    compileSdkVersion 31
    //buildToolsVersion "19.1.0"

    defaultConfig {
        minSdkVersion 14//7
        targetSdkVersion 31
        versionCode 2
        versionName "1.0.1"
    }
    buildTypes {
        release {
            //runProguard false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
        }
    }
    sourceSets {
        getByName("main").java.srcDirs("src/main/kotlin")
        getByName("test").java.srcDirs("src/test/kotlin")
        getByName("androidTest").java.srcDirs("src/androidTest/kotlin")
    }
}

dependencies {
    implementation 'eu.rekisoft.android.util:LazyWorker:2.0.2'
    implementation 'org.minidns:minidns-hla:1.0.1'
    implementation 'com.squareup.okhttp3:okhttp:4.9.1'
    implementation 'com.google.android.material:material:1.4.0'
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:2.3.1"
    implementation "androidx.lifecycle:lifecycle-runtime:2.3.1"
    testImplementation 'junit:junit:4.13.2'
}

//apply from: 'https://raw.github.com/chrisbanes/gradle-mvn-push/master/gradle-mvn-push.gradle'

// copy of https://github.com/keyboardsurfer/Crouton/blob/master/library/build.gradle
/*
android.libraryVariants.all { variant ->
    def name = variant.buildType.name
    if (name.equals("debug")) {
        return; // Skip debug builds.
    }
    task("javadoc${variant.name.capitalize()}", type: Javadoc) {
        description "Generates Javadoc for $variant.name."
        source = variant.javaCompile.source
        Properties properties = new Properties()
        properties.load(project.rootProject.file('local.properties').newDataInputStream())
        def sdkDir = properties.getProperty('sdk.dir')
        ext.androidJar = sdkDir + "/platforms/${android.compileSdkVersion}/android.jar"
        classpath = files(variant.javaCompile.classpath.files) + files(ext.androidJar)
    }

    task("bundleJavadoc${variant.name.capitalize()}", type: Jar) {
        description "Bundles Javadoc into zip for $variant.name."
        classifier = "javadoc"
        from tasks["javadoc${variant.name.capitalize()}"]
    }

}*/

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from android.sourceSets.main.java
}

task jar(type: Jar) {
    from 'build/classes/release'
}

task javadocJar(type: Jar, dependsOn: "javadocRelease") {
    classifier = 'javadoc'
    from 'build/docs/javadoc'
}

artifacts {
    archives sourcesJar
    archives javadocJar
    archives jar
}

task wrapper(type: Wrapper) {
    description "Generates the gradle wrapper"
    gradleVersion = "1.10"
}

//signing {
//    sign configurations.archives
//}
/*
uploadArchives {
    configuration = configurations.archives
    repositories.mavenDeployer {
//        beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

        repository(url: sonatypeRepo) {
            authentication(userName: sonatypeUser, password: sonatypePass)
        }

        pom.project {
            inceptionYear theInceptionYear
            name githubProject
            groupId mavenGroupId
            version mavenVersion
            artifactId mavenArtifactId
            packaging 'aar'
            description mavenDescription
            url 'https://github.com/'+githubNickname+'/'+githubProject

            scm {
                url 'scm:git@github.com:'+githubNickname+'/'+githubProject+'.git'
                connection 'scm:git@github.com:'+githubNickname+'/'+githubProject+'.git'
                tag mavenVersion
                developerConnection 'scm:git@github.com:'+githubNickname+'/'+githubProject+'.git'
            }

            issueManagement {
                url 'https://github.com/'+githubNickname+'/'+githubProject+'/issues'
                system 'GitHub Issues'
            }

            licenses {
                license {
                    name licenseName
                    url licenseUrl
                    //comment licenseComment
                    //distribution 'repo'
                }
            }

            developers {
                developer {
                    id githubNickname
                    name author
                }
            }
        }.writeTo("$buildDir/libs/pom.xml")
    }
}
*/